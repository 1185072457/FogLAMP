#!/bin/bash

##--------------------------------------------------------------------
## Copyright (c) 2017 OSIsoft, LLC
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##--------------------------------------------------------------------

set -e
#set -x

#
# This is the startup script for foglamp
#
USAGE="Usage: `basename ${0}` {start|stop|status|help}"


# Check FOGLAMP_ROOT
if [ -z ${FOGLAMP_ROOT+x} ]; then
    # Set FOGLAMP_ROOT as the default directory
    FOGLAMP_ROOT="/usr/local/foglamp"
    export FOGLAMP_ROOT
fi

# Set FOGLAMP_DATA if it does not exist
if [ -z ${FOGLAMP_DATA+x} ]; then
    FOGLAMP_DATA="${FOGLAMP_ROOT}/data"
    export FOGLAMP_DATA
fi

# Check if $FOGLAMP_DATA exists
if [[ -e ${FOGLAMP_DATA} ]]; then

    # Check if $FOGLAMP_DATA is a directory
    if [[ ! -d ${FOGLAMP_DATA} ]]; then
        write_log "err" "FogLAMP cannot be executed: ${FOGLAMP_DATA} is not a valid directory." "all" "pretty"
        exit 1
    fi
else
    # $FOGLAMP_DATA does not exist: create it
    mkdir -p ${FOGLAMP_DATA}
fi

# Check if the default directory exists
if [[ ! -d "${FOGLAMP_ROOT}" ]]; then
    write_log "err" "FogLAMP cannot be executed: ${FOGLAMP_ROOT} is not a valid directory." "all" "pretty"
    write_log "info" "Create the enviroment variable FOGLAMP_ROOT before using FogLAMP." "outonly" "pretty"
    write_log "info" "Specify the base directory for FogLAMP and set the variable with:" "outonly" "pretty"
    write_log "info" "export FOGLAMP_ROOT=<basedir>" "outonly" "pretty"
    exit 1
fi


## The Logging Handler
#
# Paramaters: $1 - Severity:
#                  - debug
#                  - info
#                  - notice
#                  - err
#                  - crit
#                  - alert
#                  - emerg
#             $2 - Message
#             $3 - Output:
#                  - logonly : send the message only to syslog
#                  - all     : send the message to syslog and stdout
#                  - outonly " send the message only to stdout
#             $4 - Format
#                - pretty : Do not show the date and priority
#
write_log() {

    MODULE="foglamp.core"

    # Check log severity
    if ! [[ "$1" =~ ^(debug|info|notice|err|crit|alert|emerg)$ ]]; then
        write_log "err" "Internal error: unrecognized priority: $1" $3
        exit 1
    fi

    # Log to syslog
    if [[ "$3" =~ ^(logonly|all)$ ]]; then
        logger -p local0.$1 -t $MODULE $2
    fi

    # Log to Stdout
    if [[ "$3" =~ ^(outonly|all)$ ]]; then
        if [[ "$4" == "pretty" ]]; then
            echo "$2" >&2
        else
            echo "[$(date +'%Y-%m-%d %H:%M:%S')]: $@" >&2
        fi
    fi

}


## FogLAMP Start
foglamp_start() {

    # Check the storage management script
    if [[ ! -e "$FOGLAMP_ROOT/scripts/storage/storage_data" ]]; then
        write_log "info" "FogLAMP cannot start." "all" "pretty"
        write_log "err" "FogLAMP Storage Plugin not found." "all" "pretty"
        exit 1
    fi

    # Check the Python environment
    if ! [[ -x "$(command -v python3)" ]]; then
        write_log "err" "Python interpreter not found, FogLAMP cannot start." "all" "pretty"
        exit 1
    fi

    # Start the Storage Plugin for the Configuration, if exists
    # If the script does not exists, it continues (i.e. it is not an error)
    if [[ -e "$FOGLAMP_ROOT/scripts/storage/storage_conf" ]]; then
        source "$FOGLAMP_ROOT/scripts/storage/storage_conf" start
    fi

    # Start the Storage Plugin for the Data
    source "$FOGLAMP_ROOT/scripts/storage/storage_data" start
    if [ $? -ne 0 ];then
        write_log "info" "FogLAMP cannot start" "all" "pretty"
        write_log "err" "FogLAMP database is not ready." "all" "pretty"
        exit 1
    fi

    result=`foglamp_status "silent"`
    case "$result" in

        "0")
            #FogLAMP already running
            write_log "info" "FogLAMP is already running." "all" "pretty"
            ;;

        "2")
            #FogLAMP not running
            PYTHONPATH=${FOGLAMP_ROOT}/python
            export PYTHONPATH
            if [[ -e "$PYTHONPATH/foglamp/services/core/__main__.py" ]]; then
                python3 -m foglamp.services.core > /dev/null 2>&1 & disown
                write_log "info" "FogLAMP started." "all" "pretty"
            else
                write_log "err" "FogLAMP core not found." "all" "pretty"
                exit 1
            fi
            ;;

        *)
            write_log "err" "Unknown return status." "all"
            exit 1
            ;;
    esac

}


## FogLAMP Stop
#
# We know this is not the best way to stop FogLAMP, but for the moment this is all we have got
#
foglamp_stop() {

    # Check the storage management script
    if [[ ! -e "$FOGLAMP_ROOT/scripts/storage/storage_data" ]]; then
        write_log "info" "FogLAMP cannot be stopped." "all" "pretty"
        write_log "err" "FogLAMP Storage Plugin not found." "all" "pretty"
        exit 1
    fi

    # Kill the python processes
    ps -ef | grep 'python3 -m foglamp' | grep -v 'grep' | awk '{print $2}' | xargs kill -9

    # Kill the services processes
    ps -ef | grep 'services/storage --address' | grep -v 'grep' | awk '{print $2}' | xargs kill -9

    # Kill the shell script processes
    ps -ef | grep '/bin/sh services' | grep -v 'grep' | awk '{print $2}' | xargs kill -9

    # Start the Storage Plugin for the Configuration, if exists
    # If the script does not exists, it continues (i.e. it is not an error)
    if [[ -e "$FOGLAMP_ROOT/scripts/storage/storage_conf" ]]; then
        source "$FOGLAMP_ROOT/scripts/storage/storage_conf" stop
    fi

    # Stop the Storage Plugin for the Data
    source "$FOGLAMP_ROOT/scripts/storage/storage_data" stop
    
    write_log "info" "FogLAMP stopped." "all" "pretty"

}


## FogLAMP status
#  NOTE: this command works only with the default REST API Port
foglamp_status() {

    # Check if curl is present
    if [[ ! `command -v curl` ]]; then
        write_log "info" "FogLAMP cannot be checked." "outonly" "pretty"
        write_log "info" "The curl command cannot be executed." "outonly" "pretty"
    fi

    result=`curl -s http://localhost:8081/foglamp/ping || true`
    case "$result" in

        *uptime*)
            if [[ "$1" == "silent" ]]; then
                echo "0"
            else
                tot_sec=`echo $result | cut -d":" -f2 | cut -d"." -f1`
                write_log "info" "FogLAMP running." "outonly" "pretty"
                write_log "info" "FogLAMP uptime: $tot_sec seconds." "outonly" "pretty"

                # Show Services
                write_log "info" "=== FogLAMP services:" "outonly" "pretty"
                write_log "info" "foglamp.services.core" "outonly" "pretty"
                ps -ef | grep "$FOGLAMP_ROOT//services/storage" | grep -v 'grep' | awk '{print "foglamp.services.storage " $9 " " $10}' || true
                ps -ef | grep "$FOGLAMP_ROOT//services/south" | grep -v 'grep' | awk '{print "foglamp.services.south " $9 " " $10}' || true
                ps -ef | grep "$FOGLAMP_ROOT//services/north" | grep -v 'grep' | awk '{print "foglamp.services.north " $9 " " $10}' || true
                ps -ef | grep -o 'python3 -m foglamp.services.south.*' | grep -o 'foglamp.services.south.*' | grep -v 'foglamp.services.south\.\*' || true
                ps -ef | grep -o 'python3 -m foglamp.services.north.*' | grep -o 'foglamp.services.north.*' | grep -v 'foglamp.services.north\.\*' || true

                # Show Tasks
                write_log "info" "=== FogLAMP tasks:" "outonly" "pretty"
                ps -ef | grep -o 'python3 -m foglamp.tasks.*' | grep -o 'foglamp.tasks.*' | grep -v 'foglamp.tasks\.\*' || true
            fi
            ;;
        *)
            if [[ `ps -ef | grep -c 'python3 -m foglamp.services.core'` -gt 1 ]]; then
                if [[ "$1" == "silent" ]]; then
                    echo "0"
                else
                    write_log "info" "FogLAMP starting." "outonly" "pretty"
                fi
            else
                if [[ "$1" == "silent" ]]; then
                    echo "2"
                else
                    write_log "info" "FogLAMP not running." "outonly" "pretty"
                fi
            fi
            ;;
    esac
}


## FogLAMP Script Help
foglamp_help() {

    echo "${USAGE}
FogLAMP admin script
The script is used to start FogLAMP
Arguments:
 start   - Start FogLAMP core (core will start other services).
 stop    - Stop all FogLAMP services and processes
 status  - Show the status for the FogLAMP services
 help    - This text"

}


### Main Logic ###
case "$1" in
    start)
        foglamp_start
        ;;
    stop)
        foglamp_stop
        ;;
    status)
        foglamp_status
        ;;
    help)
        foglamp_help
        ;;
    *)
        echo "${USAGE}"
        exit 1
esac

exit $?
